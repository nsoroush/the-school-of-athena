### Chapter 1 (Continued): Number Theory — From Counting to Crypto

#### Arithmetic in \( \mathbb{N} \) and \( \mathbb{Z} \): Why + and - Are Chill

Last time, we explored sets as the playground of mathematics. Now we zoom into \( \mathbb{N} \) (natural numbers) and \( \mathbb{Z} \) (integers), and start playing with operations.

Let’s talk **arithmetic**—\( +, -, \times, \div \). You probably know these from kindergarten, but let’s re-express them like cryptographers:

- **Addition**: \( a + b \in \mathbb{Z} \) — no surprises. Always lands you back inside \( \mathbb{Z} \).
- **Subtraction**: \( a - b \in \mathbb{Z} \) — also fine (as long as you're in \( \mathbb{Z} \), not \( \mathbb{N} \)).
- **Multiplication**: \( a \times b \in \mathbb{Z} \) — grows quickly, but still within \( \mathbb{Z} \).
- **Division**: Not always clean. \( 7 \div 3 = 2.333\dots \notin \mathbb{Z} \)

> ⚠️ Cryptographers love operations that **stay inside the set**. That’s why \( \mathbb{Z} \) is nice. But multiplication? That’s where things get **interesting**.

### Why Multiplication is Crypto’s Best Friend
- It creates structure: repeated addition.
- It builds hard problems: factoring large numbers is **hard**.
- It behaves differently in different sets: sometimes invertible, sometimes not.

> **Athena Notes**: "Multiplication isn’t just arithmetic—it’s structure. In the right set, it’s a lock; in another, it’s the key."

### Rational Numbers \( \mathbb{Q} \): Smooth, But Too Smooth for Security
Once you allow division, you enter the world of \( \mathbb{Q} \)—fractions.

In \( \mathbb{Q} \), you can always divide (except by zero). It’s beautiful math—but not cryptographically useful:

- Too continuous
- Too predictable
- No natural wrapping or modular structure

> That’s why crypto **avoids** \( \mathbb{Q} \) and instead embraces finite rings and fields.

---

### The Division Theorem (a.k.a. Division Algorithm)
Let’s return to integers. Division isn’t always clean, but it **is** predictable:

> For any integers \( a \) and \( b > 0 \), there exist unique integers \( q \) (quotient) and \( r \) (remainder) such that:
>
> \[ a = bq + r \quad \text{where } 0 \leq r < b \]

**Example:** \( 23 \div 5 \):
- \( 23 = 4 \times 5 + 3 \) → \( q = 4, r = 3 \)

This is the foundation of **modular arithmetic**—which is **everything** in crypto.

---

### Factorization & Prime Numbers: The Hard Problem

A **factor** of a number \( n \) is any number that divides \( n \).

- \( 6 \) has factors: \( 1, 2, 3, 6 \)
- **Prime** = only divisible by 1 and itself (\( 2, 3, 5, 7, 11, ... \))

Why primes matter:
- They’re the "atoms" of multiplication
- Every number breaks down into primes uniquely
- **Factoring large numbers** (like 2048-bit RSA moduli) is hard

> **Hermes Whispers**: “Fast to multiply, slow to un-multiply—that’s where the trapdoor magic begins!”

---

### GCD: Greatest Common Divisor

- \( \gcd(a, b) \) = largest number that divides both \( a \) and \( b \)
- \( \gcd(24, 36) = 12 \)
- If \( \gcd(a, b) = 1 \), we say \( a \) and \( b \) are **coprime** (even if neither is prime!)

### Euclidean Algorithm (for GCD)
Fast way to compute GCD:

Repeat:
\[ \gcd(a, b) = \gcd(b, a \mod b) \]
Until \( b = 0 \)

**Example:** \( \gcd(48, 18) \)
- \( 48 \mod 18 = 12 \)
- \( 18 \mod 12 = 6 \)
- \( 12 \mod 6 = 0 \) → Done! Answer: 6

### LCM: Least Common Multiple
- Smallest number divisible by both \( a \) and \( b \)
- Formula: \[ \text{lcm}(a, b) = \frac{|ab|}{\gcd(a, b)} \]

**Example:** \( \text{lcm}(12, 18) = \frac{12 \times 18}{6} = 36 \)

---

### From Infinite to Finite: Why Cryptography Needs Boundaries

So far, we've worked mostly inside \( \mathbb{Z} \) and \( \mathbb{Q} \)—sets that go on forever. But in cryptography, **infinite sets are impractical**:

- Computers can't store infinity
- Security relies on choosing from **large but finite** spaces
- We want predictable, reversible arithmetic—but with a limit

### 💡 Why Does Finite = Secure?
Finite sets allow us to build problems that are:
- **Easy to compute forward** (e.g. \( a \times b \mod n \))
- **Hard to reverse** (e.g. factor \( n \), or compute discrete logs)

This **asymmetry** is the foundation of public-key cryptography.

---

### 🗣️ Character Moment: “Hermes Breaks Infinity”

> **Hermes (twirling a calculator):** “Let’s use real numbers! I’ll divide a key by \( \pi \). Totally unpredictable!”  
> **Athena (sternly):** “No chaos in crypto. You can't reverse \( \pi \). Precision breaks, and so does security.”  
> **Chad:** “So we cut the infinite into finite slices? That’s kinda epic.”  
> **Athena:** “Exactly. Finite fields are controlled universes—mathematically elegant and cryptographically tough.”

---

### Welcome to Modular Arithmetic

To get finite sets from \( \mathbb{Z} \), we use the **division theorem** to define a remainder system:

> Enter: **\( \mathbb{Z}_n \)** — the integers modulo \( n \)

This is the set:
\[ \mathbb{Z}_n = \{0, 1, 2, \dots, n-1\} \]

- Add, subtract, and multiply as usual
- Then take the **remainder mod \( n \)** to stay in the set

**Example:** In \( \mathbb{Z}_5 \):
- \( 3 + 4 = 7 \mod 5 = 2 \)
- \( 2 \times 4 = 8 \mod 5 = 3 \)
- \( -1 \equiv 4 \mod 5 \)

> **Athena Notes**: "It’s like arithmetic on a clock. Once you hit the max, you wrap around. This ‘wrap-around’ math is the backbone of encryption, hashing, and more."

---

### 🔍 Quick Practice: Which Numbers Are in \( \mathbb{Z}_7 \)?

Which of these belong to \( \mathbb{Z}_7 \)?  
a) 3  
b) 11  
c) -2  
d) 15

**Answers**:
- a) 3 → ✅ Already in range  
- b) 11 mod 7 = 4 → ✅  
- c) -2 mod 7 = 5 → ✅  
- d) 15 mod 7 = 1 → ✅

---

### 🔢 Visual Aid: Modular Arithmetic Wrap-Around

A peek at the structure of \( \mathbb{Z}_5 \):

```
ℤ:   ... -2 -1  0  1  2  3  4  5  6  7  8 ...
ℤ₅:            [0][1][2][3][4][0][1][2][3]...
```

---

Next up: exploring \( \mathbb{Z}_n \) in depth, discovering modular inverses, and uncovering the structure of **finite fields**!

